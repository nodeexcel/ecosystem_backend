generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                  @id @default(autoincrement())
  firstName             String?              @db.VarChar(50)
  lastName              String?              @db.VarChar(50)
  phoneNumber           String?              @db.VarChar(20)
  image                 String?              @db.VarChar(100)
  email                 String               @unique @db.VarChar(100)
  password              String?              @db.VarChar(255)
  city                  String?              @db.VarChar(30)
  company               String?              @db.VarChar(50)
  country               String?              @db.VarChar(50)
  role                  String?              @default("Admin") @db.VarChar(20)
  subscriptionType      String?              @db.VarChar(20)
  numberOfTeamMembers   Int?                 @default(1)
  paymentId             String?              @db.VarChar(100)
  activeProfile         Boolean?             @default(false)
  isProfileComplete     Boolean?             @default(false)
  stripeCustomerId      String?              @db.VarChar(50)
  subscriptionStatus    String?              @db.VarChar(50)
  subscriptionId        String?              @db.VarChar(100)
  refreshToken          String?              @db.VarChar(255)
  otp                   String?              @db.VarChar(6)
  subscriptionEndDate   DateTime?            @db.Timestamp(6)
  subscriptionStartDate DateTime?            @db.Timestamp(6)
  subscriptionUpdatedAt DateTime?            @db.Timestamp(6)
  teamId                String?              @db.VarChar(255)
  createdAt             DateTime?            @default(now()) @map("created_at") @db.Timestamp(6)
  google_id             String?              @db.VarChar
  appointment_setter    appointment_setter[]

  @@index([id], map: "ix_users_id")
  @@map("users")
}

model PasswordResetToken {
  id        Int       @id @default(autoincrement())
  email     String    @db.VarChar(100)
  token     String    @unique @db.VarChar(255)
  expiresAt DateTime  @db.Timestamp(6)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(6)

  @@map("password_reset_tokens")
}

model teamInvite {
  id         Int       @id @default(autoincrement())
  email      String    @db.VarChar(100)
  token      String    @unique @db.VarChar(255)
  adminId    Int
  teamId     String    @db.VarChar(255)
  role       String?   @db.VarChar(20)
  expiresAt  DateTime  @db.Timestamp(6)
  accepted   Boolean?  @default(false)
  created_at DateTime? @default(now()) @db.Timestamp(6)

  @@map("invite_tokens")
}

model transactionHistory {
  id               Int       @id @default(autoincrement())
  userId           Int
  paymentId        String    @db.VarChar(100)
  amountPaid       Float
  email            String    @db.VarChar(50)
  status           String    @db.VarChar(50)
  paymentMethod    String?   @db.VarChar(50)
  subscriptionType String?   @db.VarChar(20)
  receiptUrl       String?   @db.VarChar(255)
  currency         String?   @db.VarChar
  transactionDate  DateTime? @default(now()) @db.Timestamp(6)
  createdAt        DateTime? @default(now()) @map("created_at") @db.Timestamp(6)

  @@map("transaction_history")
}

model alembic_version {
  version_num String @id(map: "alembic_version_pkc") @db.VarChar(32)
}

model appointment_setter {
  id                      Int      @id @default(autoincrement())
  agent_name              String   @db.VarChar
  agent_personality       String   @db.VarChar
  agent_language          String?  @db.VarChar
  business_description    String   @db.VarChar
  your_business_offer     String   @db.VarChar
  qualification_questions String[] @db.VarChar
  sequence                Json
  objective_of_the_agent  String   @db.VarChar
  calendar_choosed        String?  @db.VarChar
  reply_min_time          Int
  reply_max_time          Int
  is_followups_enabled    Boolean?
  follow_up_details       Json?
  emoji_frequency         Int
  directness              Int
  is_active               Boolean?
  user_id                 Int?
  webpage_link            String?  @db.VarChar
  webpage_type            String?  @db.VarChar
  users                   User?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([id], map: "ix_appointment_setter_id")
}

model teammembers {
  id         Int       @id @default(autoincrement())
  memberId   Int
  adminId    Int
  isAdmin    Boolean?  @default(false)
  role       String?   @db.VarChar(20)
  teamId     String    @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(6)
}
